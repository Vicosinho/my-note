<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MY NOTE</title>
  <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üìù</text></svg>">

  <!-- Firebase SDKs -->
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

  <style>
    /* ========================== */
    /* SEU CSS EXISTENTE AQUI */
    /* ========================== */
    :root {
      --primary-color: #6C5CE7;
      --secondary-color: #00CEFF;
      --accent-color: #FF7675;
      --dark-color: #2D3436;
      --light-color: #F5F6FA;
      --success-color: #00B894;
      --warning-color: #FDCB6E;
      --error-color: #D63031;
      --border-color: #DFE6E9;
      --text-color: #2D3436;
      --text-light: #636E72;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap');

    body {
      background: linear-gradient(135deg, #F5F6FA 0%, #DFE6E9 100%);
      color: var(--text-color);
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    header {
      background: linear-gradient(90deg, var(--primary-color) 0%, var(--secondary-color) 100%);
      padding: 12px 25px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: white;
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .logo-icon {
      font-size: 2rem;
      color: white;
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
    }

    .logo h1 {
      font-size: 1.6rem;
      font-weight: 600;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .toolbar {
      display: flex;
      gap: 15px;
    }

    .toolbar button {
      background-color: rgba(255, 255, 255, 0.2);
      border: none;
      cursor: pointer;
      padding: 8px 15px;
      border-radius: 20px;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      gap: 6px;
      color: white;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .toolbar button:hover {
      background-color: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }

    .toolbar button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }

    .main-container {
      display: flex;
      flex: 1;
      overflow: hidden;
      background-color: white;
      margin: 15px;
      border-radius: 12px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    }

    .sidebar {
      width: 280px;
      background: linear-gradient(180deg, #F5F6FA 0%, #EDF1F7 100%);
      border-right: 1px solid var(--border-color);
      padding: 20px;
      overflow-y: auto;
      border-radius: 12px 0 0 12px;
    }

    .sidebar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid var(--border-color);
    }

    .sidebar h2 {
      font-size: 1.2rem;
      color: var(--primary-color);
      font-weight: 600;
    }

    .note-list {
      list-style: none;
    }

    .note-item {
      padding: 12px 15px;
      border-radius: 8px;
      margin-bottom: 8px;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: white;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
      border-left: 4px solid transparent;
    }

    .note-item:hover {
      transform: translateX(4px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .note-item.active {
      background-color: var(--primary-color);
      color: white;
      border-left: 4px solid var(--accent-color);
    }

    .note-item .note-title {
      flex: 1;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .note-item .delete-note {
      color: var(--accent-color);
      visibility: hidden;
      margin-left: 10px;
      transition: all 0.2s;
    }

    .note-item:hover .delete-note {
      visibility: visible;
    }

    .note-item.active .delete-note {
      color: white;
    }

    .editor-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      border-radius: 0 12px 12px 0;
    }

    .editor-toolbar {
      padding: 12px 20px;
      background: linear-gradient(90deg, #F5F6FA 0%, #EDF1F7 100%);
      border-bottom: 1px solid var(--border-color);
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }

    .editor-toolbar button {
      background-color: white;
      border: 1px solid var(--border-color);
      cursor: pointer;
      padding: 6px 12px;
      border-radius: 6px;
      font-size: 0.9rem;
      color: var(--text-color);
      transition: all 0.2s;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .editor-toolbar button:hover {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }

    .editor-toolbar button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      background-color: white;
      color: var(--text-color);
    }

    #note-title {
      padding: 20px;
      font-size: 1.8rem;
      border: none;
      border-bottom: 1px solid var(--border-color);
      width: 100%;
      outline: none;
      font-weight: 600;
      color: var(--primary-color);
    }

    #note-title::placeholder {
      color: var(--text-light);
      opacity: 0.5;
    }

    #note-content {
      flex: 1;
      padding: 20px;
      font-size: 1.1rem;
      line-height: 1.6;
      border: none;
      resize: none;
      outline: none;
      overflow-y: auto;
      color: var(--text-color);
      font-family: inherit;
      font-size: inherit;
      line-height: inherit;
      color: inherit;
    }

    #note-content[placeholder]:empty:before {
      content: attr(placeholder);
      color: var(--text-light);
      opacity: 0.5;
    }

    .status-bar {
      padding: 8px 20px;
      background: linear-gradient(90deg, #F5F6FA 0%, #EDF1F7 100%);
      border-top: 1px solid var(--border-color);
      font-size: 0.8rem;
      color: var(--text-light);
      display: flex;
      justify-content: space-between;
      border-radius: 0 0 12px 0;
    }

    .char-count-warning {
      color: var(--warning-color);
      font-weight: 500;
    }

    .char-count-error {
      color: var(--error-color);
      font-weight: 600;
    }

    .dark-mode {
      background: linear-gradient(135deg, #2D3436 0%, #1E272E 100%);
      color: var(--light-color);
    }

    .dark-mode header {
      background: linear-gradient(90deg, #5C4AC9 0%, #0088A8 100%);
    }

    .dark-mode .main-container {
      background-color: var(--dark-color);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }

    .dark-mode .sidebar,
    .dark-mode .editor-toolbar,
    .dark-mode .status-bar {
      background: linear-gradient(180deg, #3B3B3B 0%, #2D2D2D 100%);
      border-color: #444;
    }

    .dark-mode .toolbar button {
      background-color: rgba(0, 0, 0, 0.2);
    }

    .dark-mode .toolbar button:hover {
      background-color: rgba(0, 0, 0, 0.3);
    }

    .dark-mode .note-item {
      background-color: #3B3B3B;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
      color: #EEE;
    }

    .dark-mode .note-item.active {
      background-color: var(--primary-color);
      color: white;
    }

    .dark-mode .editor-toolbar button {
      background-color: #3B3B3B;
      border-color: #444;
      color: #EEE;
    }

    .dark-mode .editor-toolbar button:hover {
      background-color: var(--primary-color);
      color: white;
    }

    .dark-mode #note-title,
    .dark-mode #note-content {
      background-color: var(--dark-color);
      color: var(--light-color);
      border-color: #444;
    }

    .dark-mode #note-title::placeholder,
    .dark-mode #note-content[placeholder]:empty:before {
      color: #AAA;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background-color: white;
      padding: 25px;
      border-radius: 12px;
      width: 450px;
      max-width: 90%;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .dark-mode .modal-content {
      background-color: #3B3B3B;
    }

    .modal-title {
      margin-bottom: 20px;
      color: var(--primary-color);
      font-size: 1.3rem;
      font-weight: 600;
    }

    .dark-mode .modal-title {
      color: var(--secondary-color);
    }

    .modal-input {
      width: 100%;
      padding: 12px 15px;
      margin-bottom: 20px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s;
    }

    .modal-input:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(108, 92, 231, 0.2);
    }

    .dark-mode .modal-input {
      background-color: #2D2D2D;
      border-color: #444;
      color: #EEE;
    }

    .modal-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }

    .modal-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s;
    }

    .modal-btn-primary {
      background-color: var(--primary-color);
      color: white;
    }

    .modal-btn-primary:hover {
      background-color: #5C4AC9;
      transform: translateY(-2px);
    }

    .modal-btn-secondary {
      background-color: var(--light-color);
      color: var(--text-color);
      border: 1px solid var(--border-color);
    }

    .modal-btn-secondary:hover {
      background-color: #E1E5EB;
    }

    .dark-mode .modal-btn-secondary {
      background-color: #444;
      color: #EEE;
      border-color: #555;
    }

    .modal-input[type="file"] {
      padding: 10px;
      border: 1px dashed var(--border-color);
      background-color: transparent;
    }

    .dark-mode .modal-input[type="file"] {
      border-color: #555;
    }
  </style>
</head>

<body>
  <header>
    <div class="logo">
      <div class="logo-icon">‚úèÔ∏è</div>
      <h1>My Note</h1>
    </div>
    <div class="toolbar">
      <button id="new-note-btn"><span>Nova Nota</span></button>
      <button id="save-note-btn"><span>Salvar</span></button>
      <button id="dark-mode-btn"><span>Modo Escuro</span></button>
    </div>
  </header>

  <div class="main-container">
    <div class="sidebar">
      <div class="sidebar-header">
        <h2>Suas Notas</h2>
        <span id="note-count">0/50</span>
      </div>
      <ul class="note-list" id="note-list"></ul>
    </div>

    <div class="editor-container">
      <div class="editor-toolbar">
        <button id="bold-btn" title="Negrito"><b>B</b></button>
        <button id="italic-btn" title="It√°lico"><i>I</i></button>
        <button id="underline-btn" title="Sublinhado"><u>U</u></button>
        <button id="list-btn" title="Lista">‚Ä¢ Lista</button>
        <button id="numbered-list-btn" title="Lista numerada">1. Lista</button>
        <button id="export-txt-btn" title="Exportar como TXT">‚Üì Exportar</button>
        <button id="import-txt-btn" title="Importar TXT">‚Üë Importar</button>
      </div>

      <input type="text" id="note-title" placeholder="T√≠tulo da nota..." maxlength="100">
      <div id="note-content" contenteditable="true" placeholder="Comece a escrever aqui..."></div>
      <div class="status-bar">
        <span id="char-count">0/10000 caracteres</span>
        <span id="last-saved">N√£o salvo</span>
      </div>
    </div>
  </div>

  <!-- Modals -->
  <div class="modal" id="login-modal">
    <div class="modal-content">
      <h3 class="modal-title">Login / Cadastro</h3>
      <input type="email" id="login-email" class="modal-input" placeholder="Email">
      <input type="password" id="login-password" class="modal-input" placeholder="Senha">
      <div class="modal-buttons">
        <button class="modal-btn modal-btn-primary" id="login-btn">Entrar</button>
        <button class="modal-btn modal-btn-secondary" id="signup-btn">Cadastrar</button>
      </div>
    </div>
  </div>

  <div class="modal" id="new-note-modal">
    <div class="modal-content">
      <h3 class="modal-title">Nova Nota</h3>
      <input type="text" class="modal-input" id="new-note-name" placeholder="Nome da nota" maxlength="100">
      <div class="modal-buttons">
        <button class="modal-btn modal-btn-secondary" id="cancel-new-note">Cancelar</button>
        <button class="modal-btn modal-btn-primary" id="confirm-new-note">Criar</button>
      </div>
    </div>
  </div>

  <div class="modal" id="import-txt-modal">
    <div class="modal-content">
      <h3 class="modal-title">Importar Nota</h3>
      <input type="file" id="txt-file-input" accept=".txt" class="modal-input">
      <div class="modal-buttons">
        <button class="modal-btn modal-btn-secondary" id="cancel-import-txt">Cancelar</button>
        <button class="modal-btn modal-btn-primary" id="confirm-import-txt">Importar</button>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // ==================== FIREBASE ====================
      const firebaseConfig = {
        apiKey: "AIzaSyBXB1DyzeSj-EmhXi86kaEJPD6Cm8DkfCs",
        authDomain: "mynote-35e13.firebaseapp.com",
        projectId: "mynote-35e13",
        storageBucket: "mynote-35e13.firebasestorage.app",
        messagingSenderId: "223732152382",
        appId: "1:223732152382:web:f89d42294f700471f2396f"
      };
      firebase.initializeApp(firebaseConfig);
      const auth = firebase.auth();
      const db = firebase.firestore();
      // ==================== ELEMENTOS ====================
      const newNoteBtn = document.getElementById('new-note-btn');
      const saveNoteBtn = document.getElementById('save-note-btn');
      const darkModeBtn = document.getElementById('dark-mode-btn');
      const noteList = document.getElementById('note-list');
      const noteTitle = document.getElementById('note-title');
      const noteContent = document.getElementById('note-content');
      const charCount = document.getElementById('char-count');
      const lastSaved = document.getElementById('last-saved');
      const loginModal = document.getElementById('login-modal');
      const loginBtn = document.getElementById('login-btn');
      const signupBtn = document.getElementById('signup-btn');
      const loginEmail = document.getElementById('login-email');
      const loginPassword = document.getElementById('login-password');
      const newNoteModal = document.getElementById('new-note-modal');
      const newNoteName = document.getElementById('new-note-name');
      const confirmNewNote = document.getElementById('confirm-new-note');
      const cancelNewNote = document.getElementById('cancel-new-note');
      const importTxtModal = document.getElementById('import-txt-modal');
      const txtFileInput = document.getElementById('txt-file-input');
      const confirmImportTxt = document.getElementById('confirm-import-txt');
      const cancelImportTxt = document.getElementById('cancel-import-txt');
      const exportTxtBtn = document.getElementById('export-txt-btn');
      const importTxtBtn = document.getElementById('import-txt-btn');
      const boldBtn = document.getElementById('bold-btn');
      const italicBtn = document.getElementById('italic-btn');
      const underlineBtn = document.getElementById('underline-btn');
      const listBtn = document.getElementById('list-btn');
      const numberedListBtn = document.getElementById('numbered-list-btn');
      let notes = [];
      let currentNoteId = null;
      let darkMode = false;
      let autoSaveTimer;
      // ==================== AUTENTICA√á√ÉO ====================
      loginModal.style.display = 'flex';
      loginBtn.addEventListener('click', () => {
        const email = loginEmail.value.trim();
        const password = loginPassword.value.trim();
        if (!email || !password) return alert('Preencha todos os campos!');
        auth.signInWithEmailAndPassword(email, password)
          .then(() => {
            loginModal.style.display = 'none';
            loadUserNotes();
          })
          .catch(err => alert(err.message));
      });
      signupBtn.addEventListener('click', () => {
        const email = loginEmail.value.trim();
        const password = loginPassword.value.trim();
        if (!email || !password) return alert('Preencha todos os campos!');
        auth.createUserWithEmailAndPassword(email, password)
          .then(() => {
            loginModal.style.display = 'none';
            loadUserNotes();
          })
          .catch(err => alert(err.message));
      });
      auth.onAuthStateChanged(user => {
        if (user) {
          loginModal.style.display = 'none';
          loadUserNotes();
        } else {
          loginModal.style.display = 'flex';
        }
      });
      const userId = () => auth.currentUser.uid;
      // ==================== FUN√á√ïES NOTAS ====================
      function renderNoteList() {
        noteList.innerHTML = '';
        notes.forEach(note => {
          const li = document.createElement('li');
          li.classList.add('note-item');
          if (note.id === currentNoteId) li.classList.add('active');
          li.innerHTML = `<span class="note-title">${note.title}</span><span class="delete-note">üóëÔ∏è</span>`;
          li.addEventListener('click', () => loadNote(note.id));
          li.querySelector('.delete-note').addEventListener('click', e => {
            e.stopPropagation();
            deleteNote(note.id);
          });
          noteList.appendChild(li);
        });
        updateCharCount();
      }

      function updateCharCount() {
        const count = noteContent.textContent.length;
        charCount.textContent = `${count}/10000 caracteres`;
      }

      function updateLastSaved() {
        lastSaved.textContent = `√öltima vez salvo: ${new Date().toLocaleTimeString()}`;
      }

      function loadNote(id) {
        const note = notes.find(n => n.id === id);
        if (!note) return;
        currentNoteId = id;
        noteTitle.value = note.title;
        noteContent.innerHTML = note.content;
        renderNoteList();
      }

      function saveCurrentNote() {
        if (!auth.currentUser) return alert('Fa√ßa login para salvar notas');
        const noteData = {
          title: noteTitle.value,
          content: noteContent.innerHTML,
          updatedAt: new Date().toISOString()
        };
        if (currentNoteId) {
          db.collection('users').doc(userId())
            .collection('notes').doc(currentNoteId)
            .set(noteData)
            .then(() => updateLastSaved());
        } else if (noteTitle.value.trim() || noteContent.textContent.trim()) {
          const newNoteRef = db.collection('users').doc(userId())
            .collection('notes').doc();
          currentNoteId = newNoteRef.id;
          newNoteRef.set(noteData).then(() => updateLastSaved());
        }
        loadUserNotes();
      }

      function deleteNote(id) {
        if (!auth.currentUser) return alert('Fa√ßa login para deletar notas');
        db.collection('users').doc(userId())
          .collection('notes').doc(id)
          .delete()
          .then(() => {
            if (currentNoteId === id) {
              noteTitle.value = '';
              noteContent.innerHTML = '';
              currentNoteId = null;
            }
            loadUserNotes();
          });
      }

      function loadUserNotes() {
        if (!auth.currentUser) return;
        db.collection('users').doc(userId())
          .collection('notes')
          .orderBy('updatedAt', 'desc')
          .get()
          .then(snapshot => {
            notes = snapshot.docs.map(doc => ({
              id: doc.id,
              ...doc.data()
            }));
            renderNoteList();
          });
      }

      function createNewNote(title) {
        if (!title.trim()) return alert('O t√≠tulo n√£o pode ser vazio');
        noteTitle.value = title;
        noteContent.innerHTML = '';
        currentNoteId = null;
        saveCurrentNote();
        newNoteModal.style.display = 'none';
      }
      // ==================== EVENTOS ====================
      newNoteBtn.addEventListener('click', () => newNoteModal.style.display = 'flex');
      confirmNewNote.addEventListener('click', () => createNewNote(newNoteName.value));
      cancelNewNote.addEventListener('click', () => newNoteModal.style.display = 'none');
      saveNoteBtn.addEventListener('click', saveCurrentNote);
      noteContent.addEventListener('input', () => {
        updateCharCount();
        clearTimeout(autoSaveTimer);
        autoSaveTimer = setTimeout(saveCurrentNote, 2000);
      });
      // ==================== FORMATA√á√ÉO ====================
      function format(command) {
        document.execCommand(command, false, null);
      }
      boldBtn.addEventListener('click', () => format('bold'));
      italicBtn.addEventListener('click', () => format('italic'));
      underlineBtn.addEventListener('click', () => format('underline'));
      listBtn.addEventListener('click', () => format('insertUnorderedList'));
      numberedListBtn.addEventListener('click', () => format('insertOrderedList'));
      // ==================== DARK MODE ====================
      darkModeBtn.addEventListener('click', () => {
        darkMode = !darkMode;
        document.body.classList.toggle('dark-mode', darkMode);
      });
      // ==================== EXPORT/IMPORT ====================
      exportTxtBtn.addEventListener('click', () => {
        if (!noteTitle.value && !noteContent.textContent) return alert('Nota vazia!');
        const blob = new Blob([noteContent.textContent], {
          type: 'text/plain;charset=utf-8'
        });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = (noteTitle.value || 'nota') + '.txt';
        a.click();
      });
      importTxtBtn.addEventListener('click', () => importTxtModal.style.display = 'flex');
      confirmImportTxt.addEventListener('click', () => {
        const file = txtFileInput.files[0];
        if (!file) return alert('Selecione um arquivo!');
        const reader = new FileReader();
        reader.onload = () => {
          noteContent.innerHTML = reader.result;
          importTxtModal.style.display = 'none';
        };
        reader.readAsText(file);
      });
      cancelImportTxt.addEventListener('click', () => importTxtModal.style.display = 'none');
    });
  </script>
</body>

</html>
